[tool.poetry]
name = "gastric-adci-platform"
version = "1.0.0"
description = "Precision oncology decision support platform for gastric surgery using ADCI framework"
authors = ["ADCI Team <team@adci.health>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/Elanass/yaz"
repository = "https://github.com/Elanass/yaz"
documentation = "https://github.com/Elanass/yaz/docs"
keywords = ["oncology", "gastric", "surgery", "decision-support", "medical", "ai"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [{ include = "backend" }]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
uvicorn = {extras = ["standard"], version = "^0.30.0"}
sqlalchemy = {extras = ["asyncio"], version = "^2.0.23"}
asyncpg = "^0.29.0"
alembic = "^1.13.1"
pydantic = {extras = ["email"], version = "^2.5.0"}
pydantic-settings = "^2.1.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
python-multipart = "^0.0.6"
httpx = "^0.25.2"
redis = "^5.0.1"
celery = "^5.3.4"
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.38.0"}
ipfshttpclient = "^0.8.0a2"
cryptography = "^44.0.0"
python-dateutil = "^2.8.2"
jinja2 = "^3.1.2"
aiofiles = "^23.2.1"
pillow = "^10.1.0"
pandas = "^2.1.4"
numpy = "^1.26.2"
scikit-learn = "^1.3.2"
matplotlib = "^3.8.2"
plotly = "^5.17.0"
langchain = "^0.0.350"
langchain-openai = "^0.0.2"
tiktoken = "^0.5.2"
python-fasthtml = "^0.12.21"
webauthn = "^2.6.0"
fhir-resources = "^8.1.0"
pyjwt = {extras = ["crypto"], version = "^2.10.1"}
pyotp = "^2.9.0"
qrcode = {extras = ["pil"], version = "^8.2"}
websockets = "^15.0.1"
pywebpush = "^1.14.1"
typing-extensions = "^4.8.0"
prov = "^2.0.0"
networkx = "^3.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
black = "^23.11.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
mypy = "^1.7.1"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
locust = "^2.17.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.4.8"
mkdocs-mermaid2-plugin = "^1.1.1"

[tool.poetry.group.deploy.dependencies]
gunicorn = "^21.2.0"
docker = "^6.1.3"
kubernetes = "^28.1.0"
ansible = "^8.7.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["backend", "frontend"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --disable-warnings"
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "clinical: marks tests as clinical workflow tests"
]

[tool.coverage.run]
source = ["backend", "frontend"]
omit = [
    "*/tests/*",
    "*/migrations/*", 
    "*/__pycache__/*",
    "*/venv/*",
    "*/node_modules/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "migrations"]
