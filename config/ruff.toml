# Ruff configuration for Surgify Platform
# https://docs.astral.sh/ruff/

# Target Python 3.10+
target-version = "py310"
line-length = 88
indent-width = 4

# Include source files and tests
include = ["src/**/*.py", "tests/**/*.py", "scripts/**/*.py"]
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "node_modules",
    "alembic/versions/*.py",  # Exclude auto-generated migration files
]

[lint]
# Enable comprehensive linting rules
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todos
    "FIX",  # flake8-fixme
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "NPY",  # NumPy-specific rules
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

ignore = [
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class
    "D102",   # Missing docstring in public method
    "D103",   # Missing docstring in public function
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default arg in function definition
    "S101",   # Use of assert detected (needed for tests)
    "S104",   # Possible binding to all interfaces
    "COM812", # Missing trailing comma (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on TODO
    "FIX002", # Line contains TODO
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Tests can use magic values, assert statements, and have relaxed naming
"tests/**/*.py" = [
    "S101",   # asserts allowed in tests
    "PLR2004", # Magic values allowed in tests
    "ANN001", # Type annotations less strict in tests
    "ANN201", # Return type annotations less strict in tests
    "D",      # Docstrings less strict in tests
]

# Migration files have auto-generated content
"alembic/versions/*.py" = ["ALL"]

# Configuration files can have imports without usage
"**/config/*.py" = ["F401"]

# Scripts can be more relaxed
"scripts/*.py" = ["T201", "S602", "S603", "S607"]

[lint.isort]
known-first-party = ["surgify", "src"]
force-single-line = false
lines-after-imports = 2
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[lint.mccabe]
max-complexity = 10

[lint.pydocstyle]
convention = "google"

[lint.pycodestyle]
max-doc-length = 88
max-line-length = 88

[lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 50

[format]
# Use double quotes for strings.
quote-style = "double"

# Indent with spaces, rather than tabs.
indent-style = "space"

# Respect magic trailing comma.
skip-magic-trailing-comma = false

# Automatically detect the appropriate line ending.
line-ending = "auto"

# Enable reformatting of code snippets in docstrings.
docstring-code-format = true

# Set the line length limit used by the formatter.
docstring-code-line-length = "dynamic"
