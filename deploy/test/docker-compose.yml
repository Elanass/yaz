version: '3.8'

services:
  db-test:
    image: postgres:15
    environment:
      POSTGRES_DB: adci_test_db
      POSTGRES_USER: adci_test_user
      POSTGRES_PASSWORD: adci_test_pass
    ports:
      - "5433:5432"  # Different port to avoid conflicts with dev DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U adci_test_user -d adci_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-test:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # Different port to avoid conflicts with dev Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-runner:
    build:
      context: ../../
      dockerfile: deploy/test/Dockerfile
    environment:
      - DATABASE_URL=postgresql://adci_test_user:adci_test_pass@db-test:5432/adci_test_db
      - REDIS_URL=redis://redis-test:6379/0
      - SECRET_KEY=test-secret-key
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - ENABLE_SWAGGER=false
      - PATIENT_DATA_ENCRYPTION=true
      - ENABLE_AUDIT_LOGGING=true
      - ENCRYPTION_KEY=dGVzdGtleWZvcmZlcm5ldHRlc3RpbmdhbmRub3RoaW5nZWxzZQ==
      - TEST_COVERAGE_THRESHOLD=90
    depends_on:
      db-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ../../:/app
      - ../../test-reports:/app/test-reports
    command: ["python", "-m", "pytest", "tests/", "-v", "--cov=.", "--cov-report=xml:/app/test-reports/coverage.xml", "--cov-report=html:/app/test-reports/htmlcov", "--junitxml=/app/test-reports/junit.xml"]
