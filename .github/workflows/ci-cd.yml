name: "YAZ Healthcare Platform - Enhanced CI/CD"

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # === AUDIT & CODE QUALITY ===
  audit:
    name: "🔍 Complete Codebase Audit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run comprehensive audit
        run: |
          echo "🔍 Running complete audit..."
          make audit
          
      - name: Check for dead code
        run: |
          echo "🔍 Checking for dead code..."
          make dead-code
          
      - name: Check dependencies
        run: |
          echo "📦 Checking dependencies..."
          make deps-check

      - name: Upload audit reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: audit-reports
          path: |
            bandit-report.json
            safety-report.json
            vulture-report.txt

  # === LINTING & FORMATTING ===
  lint:
    name: "🎨 Code Quality & Formatting"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run ruff linter
        run: |
          echo "🔍 Running ruff linter..."
          make lint

      - name: Check code formatting
        run: |
          echo "🎨 Checking code formatting..."
          make format

  # === TYPE CHECKING ===
  typecheck:
    name: "🔍 Type Checking (≥95% coverage)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run MyPy type checking
        run: |
          echo "🔍 Running type checks..."
          make type-check

      - name: Generate type coverage report
        run: |
          echo "📊 Generating type coverage report..."
          mypy src/ --html-report mypy-report --config-file mypy.ini || true

      - name: Upload type coverage report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: type-coverage-report
          path: mypy-report/

  # === SECURITY SCANNING ===
  security:
    name: "🔒 Security Vulnerability Scan"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run security scans
        run: |
          echo "🔒 Running security scans..."
          make security-full

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # === COMPREHENSIVE TESTING (≥60% coverage) ===
  test:
    name: "🧪 Tests (≥60% coverage required)"
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Set up test environment
        run: |
          cp .env.example .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          make test-unit

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          make test-integration

      - name: Run API tests
        run: |
          echo "🧪 Running API tests..."
          make test-api

      - name: Generate coverage report
        run: |
          echo "📊 Generating coverage report..."
          make test-cov

      - name: Check coverage threshold
        run: |
          echo "📊 Checking coverage threshold (≥60%)..."
          coverage report --fail-under=60

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # === DOCKER BUILD ===
  build:
    name: "🏗️ Multi-stage Docker Build"
    runs-on: ubuntu-latest
    needs: [audit, lint, typecheck, security, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # === HEALTH CHECKS ===
  health-check:
    name: "🏥 Application Health Validation"
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application stack
        run: |
          echo "🏥 Starting application for health checks..."
          make validate-setup
          docker-compose up -d surgify redis

      - name: Wait for application startup
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 30

      - name: Run health checks
        run: |
          echo "🏥 Running health checks..."
          make health

      - name: Test API endpoints
        run: |
          echo "🔍 Testing critical endpoints..."
          curl -f http://localhost:8000/health
          curl -f http://localhost:8000/api/v1/cases/
          curl -f http://localhost:8000/metrics

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # === DEPLOYMENT ===
  deploy-staging:
    name: "🚀 Deploy to Staging"
    runs-on: ubuntu-latest
    needs: [build, health-check]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add staging deployment logic here

  deploy-production:
    name: "🚀 Deploy to Production"
    runs-on: ubuntu-latest
    needs: [build, health-check]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add production deployment logic here

  # === NOTIFICATION ===
  notify:
    name: "📢 Deployment Notification"
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          echo "📢 Sending deployment notifications..."
          # Add notification logic (Slack, email, etc.)
