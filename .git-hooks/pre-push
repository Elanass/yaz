#!/bin/bash
# Pre-push hook for Surgify Platform
# Runs additional checks before pushing to remote repository

set -e

echo "🚀 Running pre-push checks for Surgify Platform..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[PRE-PUSH]${NC} $1"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Get branch information
CURRENT_BRANCH=$(git branch --show-current)
REMOTE_BRANCH="origin/$CURRENT_BRANCH"

print_status "Current branch: $CURRENT_BRANCH"

# Initialize error tracking
ERRORS=0

# 1. Check if branch is up to date
print_status "Checking if branch is up to date..."
if git fetch origin "$CURRENT_BRANCH" 2>/dev/null; then
    BEHIND_COUNT=$(git rev-list --count HEAD.."$REMOTE_BRANCH" 2>/dev/null || echo "0")
    if [ "$BEHIND_COUNT" -gt 0 ]; then
        print_warning "Branch is $BEHIND_COUNT commits behind $REMOTE_BRANCH"
        print_warning "Consider pulling latest changes: git pull origin $CURRENT_BRANCH"
    else
        print_success "Branch is up to date"
    fi
fi

# 2. Run comprehensive tests
print_status "Running comprehensive test suite..."
if ! make test; then
    print_error "Tests failed"
    ERRORS=$((ERRORS + 1))
else
    print_success "All tests passed"
fi

# 3. Check test coverage
print_status "Checking test coverage..."
if make test-cov > /dev/null 2>&1; then
    COVERAGE=$(make test-cov 2>/dev/null | grep "TOTAL" | awk '{print $NF}' | sed 's/%//')
    if [ -n "$COVERAGE" ] && [ "$COVERAGE" -lt 80 ]; then
        print_warning "Test coverage is ${COVERAGE}% (recommended: 80%+)"
    else
        print_success "Test coverage: ${COVERAGE}%"
    fi
else
    print_warning "Unable to determine test coverage"
fi

# 4. Security audit
print_status "Running security audit..."
if command -v safety &> /dev/null; then
    if ! safety check; then
        print_warning "Security vulnerabilities detected"
        print_warning "Review and update dependencies as needed"
    else
        print_success "Security audit passed"
    fi
else
    print_warning "safety not installed, consider: pip install safety"
fi

# 5. Dependency check
print_status "Checking dependencies..."
if [ -f "requirements.txt" ]; then
    if command -v pip-audit &> /dev/null; then
        if ! pip-audit -r requirements.txt; then
            print_warning "Dependency vulnerabilities found"
        else
            print_success "Dependencies are secure"
        fi
    fi
fi

# 6. Docker build check (if pushing to main/production branches)
if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "production" || "$CURRENT_BRANCH" == "master" ]]; then
    print_status "Building Docker image for production branch..."
    if [ -f "Dockerfile" ]; then
        if ! docker build -t surgify-test . > /dev/null; then
            print_error "Docker build failed"
            ERRORS=$((ERRORS + 1))
        else
            print_success "Docker build successful"
        fi
    fi
fi

# 7. Check for canary branch (if applicable)
if [[ "$CURRENT_BRANCH" == *"canary"* ]]; then
    print_status "Running canary-specific checks..."
    
    # Check if canary tests exist
    if [ -d "tests/canary" ]; then
        print_status "Running canary tests..."
        if ! python -m pytest tests/canary/ -v; then
            print_error "Canary tests failed"
            ERRORS=$((ERRORS + 1))
        else
            print_success "Canary tests passed"
        fi
    else
        print_warning "Canary tests directory not found"
    fi
fi

# 8. Performance benchmark (for main branches)
if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "develop" ]]; then
    print_status "Running performance benchmarks..."
    
    # Simple startup time check
    START_TIME=$(date +%s%N)
    if python -c "from src.surgify.main import main; print('Import successful')" > /dev/null 2>&1; then
        END_TIME=$(date +%s%N)
        IMPORT_TIME=$(((END_TIME - START_TIME) / 1000000))  # Convert to milliseconds
        
        if [ "$IMPORT_TIME" -gt 5000 ]; then  # 5 seconds
            print_warning "Import time is ${IMPORT_TIME}ms (consider optimization)"
        else
            print_success "Import performance: ${IMPORT_TIME}ms"
        fi
    else
        print_error "Failed to import main application"
        ERRORS=$((ERRORS + 1))
    fi
fi

# 9. Documentation check
print_status "Checking documentation..."
DOC_ISSUES=0

# Check if README is updated
if [ -f "README.md" ]; then
    LAST_COMMIT_DATE=$(git log -1 --format="%ci" README.md 2>/dev/null | cut -d' ' -f1)
    RECENT_CODE_DATE=$(git log -1 --format="%ci" src/ 2>/dev/null | cut -d' ' -f1)
    
    if [[ "$RECENT_CODE_DATE" > "$LAST_COMMIT_DATE" ]]; then
        print_warning "README.md might be outdated (last updated: $LAST_COMMIT_DATE)"
        DOC_ISSUES=$((DOC_ISSUES + 1))
    fi
fi

# Check for API documentation
if [ -d "docs/api" ]; then
    print_success "API documentation directory exists"
else
    print_warning "API documentation directory not found"
    DOC_ISSUES=$((DOC_ISSUES + 1))
fi

if [ $DOC_ISSUES -eq 0 ]; then
    print_success "Documentation checks passed"
fi

# 10. Branch naming convention check
print_status "Checking branch naming convention..."
VALID_PREFIXES="^(feature|bugfix|hotfix|release|canary|docs|test|refactor)/"

if [[ ! "$CURRENT_BRANCH" =~ $VALID_PREFIXES ]] && [[ "$CURRENT_BRANCH" != "main" ]] && [[ "$CURRENT_BRANCH" != "develop" ]] && [[ "$CURRENT_BRANCH" != "master" ]]; then
    print_warning "Branch name doesn't follow convention: $CURRENT_BRANCH"
    print_warning "Consider using: feature/, bugfix/, hotfix/, release/, canary-<id>"
else
    print_success "Branch naming convention is correct"
fi

# Summary
echo ""
print_status "Pre-push check summary:"

if [ $ERRORS -eq 0 ]; then
    print_success "All critical checks passed! 🚀"
    print_status "Push is ready to proceed"
    echo ""
    print_status "Branch: $CURRENT_BRANCH"
    print_status "Remote: origin/$CURRENT_BRANCH"
    exit 0
else
    print_error "$ERRORS critical issues found"
    print_error "Please fix the issues above before pushing"
    echo ""
    echo "Common fixes:"
    echo "  Tests: make test"
    echo "  Docker: docker build -t surgify-test ."
    echo "  Dependencies: pip install -r requirements.txt"
    echo ""
    exit 1
fi
